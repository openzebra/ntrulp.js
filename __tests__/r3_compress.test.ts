import { describe, it, expect, beforeEach } from "vitest";
import { ChaChaRng } from "@hicaru/chacharand.js"; // For deterministic randomness
import {
  packBytes,
  unpackBytes,
  convertToTernary,
  convertToDecimal,
  r3EncodeChunks,
  r3DecodeChunks,
  r3MergeWChunks,
  r3SplitWChunks,
  usizeArrayToBytes, // Import helper functions
  bytesToUsizeArray, // Import helper functions
  BITS_SIZE, // Import constant
} from "../src/compress/r3";
import { ParamsConfig, params1277 } from "../src/params"; // Adjust path as needed
import { ErrorType } from "../src/errors"; // Import ErrorType

describe("R3 Compression Utilities", () => {
  let rng: ChaChaRng;
  let getRandomValue: () => number;
  const currentParams: ParamsConfig = params1277; // Use a specific param set

  beforeEach(() => {
    // Use a fixed seed for deterministic tests matching Rust behavior if possible
    rng = ChaChaRng.fromU64Seed(0xabcdef0123456789n, 20);
    getRandomValue = () => rng.nextU32(); // Provide a u32 random source
  });

  // Mirrors Rust's pack_unpack_bytes test structure [cite: 36, 37, 38, 39, 40, 41]
  it("pack_unpack_bytes should pack and unpack data correctly", () => {
    const initialBytes = new Uint8Array(1000); // Like first `bytes` in Rust test [cite: 37]
    rng.fillBytes(initialBytes);
    const unlimitedPoly = r3DecodeChunks(initialBytes); // [cite: 37]
    const { chunks, size, seed } = r3SplitWChunks(
      unlimitedPoly,
      getRandomValue,
      currentParams,
    ); // [cite: 37]

    // Create the data that will actually be packed (shadowing pattern like Rust)
    let bytesToPackList: Uint8Array[] = [];
    let totalPackedDataLen = 0;
    for (let i = 0; i < chunks.length; i++) {
      // [cite: 38]
      const rqBytes = new Uint8Array(currentParams.RQ_BYTES); // [cite: 39]
      rng.fillBytes(rqBytes); // Fill with random data [cite: 39]
      bytesToPackList.push(rqBytes);
      totalPackedDataLen += rqBytes.length;
    }
    // Concatenate the chunks into one Uint8Array
    const dataToPack = new Uint8Array(totalPackedDataLen);
    let currentOffset = 0;
    for (const arr of bytesToPackList) {
      dataToPack.set(arr, currentOffset);
      currentOffset += arr.length;
    }

    const packed = packBytes(dataToPack, size, seed); // [cite: 40]
    const {
      dataBytes: unpackedData,
      size: unpackedSize,
      seed: unpackedSeed,
    } = unpackBytes(packed); // [cite: 40]

    expect(unpackedData).toEqual(dataToPack); // [cite: 40]
    expect(unpackedSize).toEqual(size); // [cite: 40]
    expect(unpackedSeed).toEqual(seed); // [cite: 40]
  });

  // Mirrors test_u64_convert [cite: 42, 43]
  it("usizeArrayToBytes and bytesToUsizeArray should convert correctly", () => {
    const originalList: number[] = [];
    for (let i = 0; i < 1024; i++) {
      originalList.push(rng.nextU32()); // Use u32 to stay within safe JS Number range easily [cite: 42]
    }

    const bytes = usizeArrayToBytes(originalList); // [cite: 42]
    const out = bytesToUsizeArray(bytes); // [cite: 42]

    expect(out).toEqual(originalList); // [cite: 42]
  });

  // Test edge cases for usize conversion
  it("usizeArrayToBytes should throw for unsafe integers or negative numbers", () => {
    expect(() => usizeArrayToBytes([Number.MAX_SAFE_INTEGER + 1])).toThrow(
      ErrorType.OutOfRange,
    );
    expect(() => usizeArrayToBytes([-1])).toThrow(ErrorType.OutOfRange);
  });

  it("bytesToUsizeArray should throw for incorrect byte length", () => {
    const invalidBytes = new Uint8Array(7); // Not a multiple of SYS_SIZE (8)
    expect(() => bytesToUsizeArray(invalidBytes)).toThrow(
      ErrorType.ByteslengthError,
    );
  });

  // Mirrors test_bit_convert [cite: 44, 45]
  it("convertToTernary and convertToDecimal should be inverses", () => {
    for (let n = 0; n <= 255; n++) {
      // Test all u8 values
      const bits = convertToTernary(n); // [cite: 44]
      expect(bits.length).toBe(BITS_SIZE); // Check length
      // Check digits are valid (-1, 0, 1)
      bits.forEach((digit) => expect([-1, 0, 1]).toContain(digit));

      const out = convertToDecimal(bits); // [cite: 44]
      const bits0 = convertToTernary(out); // Convert back [cite: 44]

      expect(out).toBe(n); // Check n -> out (decimal) conversion is identity [cite: 44]
      expect(bits0).toEqual(bits); // Check n -> bits -> out -> bits0; bits should equal bits0 [cite: 44]
    }
  });

  // Test edge cases for ternary conversion
  it("convertToTernary should throw for out-of-range input", () => {
    expect(() => convertToTernary(-1)).toThrow(ErrorType.OutOfRange);
    expect(() => convertToTernary(256)).toThrow(ErrorType.OutOfRange);
    expect(() => convertToTernary(1.5)).toThrow(ErrorType.OutOfRange);
  });

  it("convertToDecimal should throw for invalid length or digits", () => {
    expect(() => convertToDecimal(new Int8Array(BITS_SIZE - 1))).toThrow(
      ErrorType.SliceLengthNotR3Size,
    );
    expect(() => convertToDecimal(new Int8Array([1, 0, 2, -1, 0, 1]))).toThrow(
      ErrorType.CompressError,
    ); // Invalid digit 2
  });

  // Mirrors test_r3_encode_decode_chunks [cite: 46, 47, 48]
  it("r3EncodeChunks and r3DecodeChunks should be inverses", () => {
    for (let i = 0; i < 10; i++) {
      // [cite: 46]
      const originalBytes = new Uint8Array(1000); // Create random bytes [cite: 46]
      rng.fillBytes(originalBytes);

      const r3 = r3DecodeChunks(originalBytes); // [cite: 47]
      // The decoded length might be longer due to padding in the last chunk
      expect(r3.length).toBe(originalBytes.length * BITS_SIZE);

      const encodedBytes = r3EncodeChunks(r3); // [cite: 47]

      // Encoded bytes length should match original bytes length
      expect(encodedBytes.length).toBe(originalBytes.length);
      // The content should match the original bytes
      expect(encodedBytes).toEqual(originalBytes); // [cite: 47]
    }
  });

  // Mirrors test_encode_decode_bytes_by_chunks_spliter_merge [cite: 49, 50, 51, 52, 53, 54, 55, 56]
  it("r3SplitWChunks and r3MergeWChunks should correctly split and merge", () => {
    for (let i = 0; i < 100; i++) {
      // Match loop count [cite: 49]
      // Generate random length between 5 and 999
      const randLen = (rng.nextU32() % 995) + 5; // [cite: 50]
      const bytes = new Uint8Array(randLen);
      rng.fillBytes(bytes); // [cite: 50]

      const originalR3 = r3DecodeChunks(bytes); // Decode to get potentially long R3 poly
      // Trim trailing zeros from decoding if necessary, as split expects meaningful data
      let lastNonZeroIndex = originalR3.length - 1;
      while (lastNonZeroIndex >= 0 && originalR3[lastNonZeroIndex] === 0) {
        lastNonZeroIndex--;
      }
      const r3ToSplit = originalR3.slice(0, lastNonZeroIndex + 1);

      if (r3ToSplit.length === 0) continue; // Skip if all zeros after decode

      const { chunks, size, seed } = r3SplitWChunks(
        r3ToSplit,
        getRandomValue,
        currentParams,
      ); // [cite: 50]
      const merged = r3MergeWChunks(chunks, size, seed, currentParams); // [cite: 51]

      // Calculate sum of absolute values for comparison [cite: 52, 53, 54, 55]
      const r3Sum = r3ToSplit.reduce((acc, val) => acc + Math.abs(val), 0);
      const mSum = merged.reduce((acc, val) => acc + Math.abs(val), 0);

      expect(r3Sum).toEqual(mSum); // Check weights match [cite: 55]
      expect(size.length).toEqual(chunks.length); // Check array lengths [cite: 55]
      expect(merged.length).toEqual(r3ToSplit.length); // Check final poly length [cite: 55]
      expect(merged).toEqual(r3ToSplit); // Check content equality [cite: 55]
    }
  });

  it("test unpackBytes", () => {
    const unpacked = Uint8Array.from([
      45, 143, 252, 96, 151, 153, 204, 113, 247, 53, 24, 126, 159, 114, 159,
      202, 79, 215, 81, 77, 255, 127, 144, 93, 164, 224, 238, 94, 126, 76, 235,
      18, 172, 115, 45, 216, 234, 120, 79, 113, 129, 200, 166, 62, 243, 17, 9,
      250, 202, 180, 147, 228, 220, 11, 83, 123, 252, 121, 115, 116, 115, 130,
      124, 22, 101, 228, 93, 12, 154, 149, 135, 185, 33, 175, 106, 100, 123, 68,
      121, 111, 196, 201, 248, 150, 147, 195, 194, 24, 170, 84, 127, 167, 6, 62,
      132, 193, 43, 245, 159, 88, 254, 65, 131, 197, 158, 80, 185, 152, 105, 54,
      60, 66, 252, 7, 39, 28, 173, 44, 127, 82, 27, 193, 124, 209, 250, 143, 94,
      223, 115, 17, 218, 143, 161, 172, 198, 182, 250, 51, 11, 69, 130, 223, 22,
      200, 198, 84, 6, 147, 166, 26, 7, 95, 223, 9, 2, 217, 95, 76, 7, 145, 94,
      42, 124, 231, 17, 193, 29, 191, 149, 177, 57, 35, 252, 71, 100, 144, 175,
      173, 191, 65, 100, 202, 60, 93, 192, 113, 130, 190, 125, 86, 125, 204, 28,
      141, 105, 15, 7, 252, 17, 109, 137, 26, 244, 172, 137, 33, 252, 58, 148,
      130, 67, 65, 22, 121, 71, 56, 245, 212, 42, 219, 213, 97, 208, 113, 94,
      185, 47, 192, 15, 40, 159, 54, 38, 212, 176, 215, 21, 194, 47, 155, 232,
      10, 125, 124, 54, 131, 104, 128, 83, 157, 67, 22, 78, 29, 101, 71, 248,
      210, 129, 226, 117, 101, 117, 53, 125, 151, 60, 125, 6, 18, 118, 82, 219,
      165, 191, 71, 206, 157, 71, 128, 17, 55, 218, 123, 233, 171, 38, 102, 17,
      84, 183, 112, 197, 217, 110, 226, 169, 48, 145, 122, 78, 239, 124, 233,
      72, 208, 240, 19, 141, 235, 183, 17, 34, 39, 207, 140, 117, 215, 168, 193,
      182, 179, 15, 35, 208, 93, 104, 115, 56, 46, 62, 173, 59, 1, 118, 248,
      248, 46, 206, 129, 86, 10, 171, 24, 250, 21, 100, 241, 82, 231, 129, 55,
      198, 148, 89, 78, 70, 222, 129, 165, 132, 177, 211, 219, 165, 141, 30, 20,
      25, 12, 112, 26, 14, 200, 183, 138, 62, 5, 64, 197, 116, 76, 211, 142, 78,
      16, 106, 223, 22, 137, 123, 100, 213, 176, 200, 83, 83, 173, 65, 34, 135,
      168, 255, 21, 38, 176, 161, 216, 139, 147, 92, 47, 107, 182, 170, 242, 29,
      249, 36, 112, 248, 190, 163, 12, 244, 195, 179, 134, 88, 178, 76, 152, 59,
      38, 13, 241, 45, 144, 42, 224, 137, 136, 217, 94, 233, 24, 144, 58, 193,
      53, 15, 5, 185, 19, 69, 177, 166, 191, 53, 132, 214, 129, 233, 67, 221,
      239, 233, 220, 117, 78, 98, 113, 143, 232, 123, 42, 127, 120, 236, 199,
      92, 65, 140, 73, 73, 89, 10, 30, 127, 137, 217, 79, 126, 124, 153, 182,
      133, 211, 116, 101, 0, 132, 45, 179, 163, 74, 53, 102, 2, 214, 151, 6,
      218, 125, 234, 29, 44, 108, 157, 156, 103, 79, 82, 105, 41, 70, 35, 211,
      35, 94, 215, 67, 78, 213, 177, 4, 1, 67, 195, 66, 27, 92, 246, 103, 201,
      182, 68, 141, 124, 0, 162, 241, 147, 117, 216, 13, 183, 149, 17, 122, 39,
      132, 206, 40, 167, 191, 204, 66, 183, 77, 132, 88, 10, 60, 94, 49, 253,
      135, 187, 2, 161, 86, 154, 44, 15, 36, 243, 155, 115, 7, 216, 55, 102,
      222, 241, 224, 166, 122, 21, 94, 114, 237, 172, 40, 209, 55, 175, 85, 90,
      137, 173, 70, 161, 135, 100, 163, 124, 246, 0, 144, 119, 86, 195, 207, 5,
      211, 232, 52, 3, 20, 210, 166, 57, 175, 21, 212, 113, 249, 250, 133, 222,
      238, 63, 59, 177, 158, 157, 63, 146, 128, 21, 99, 182, 56, 190, 198, 227,
      21, 127, 243, 221, 85, 235, 100, 83, 217, 131, 233, 59, 204, 87, 20, 194,
      104, 110, 67, 68, 209, 238, 126, 171, 93, 184, 13, 250, 50, 224, 195, 30,
      99, 67, 196, 90, 56, 115, 78, 46, 15, 21, 215, 39, 129, 223, 89, 92, 97,
      139, 174, 78, 123, 131, 197, 23, 59, 222, 5, 40, 150, 124, 129, 100, 51,
      118, 138, 69, 212, 39, 240, 67, 140, 109, 77, 157, 46, 188, 199, 120, 147,
      17, 187, 151, 18, 139, 127, 157, 44, 68, 221, 190, 196, 122, 126, 152,
      208, 0, 203, 217, 65, 80, 213, 37, 151, 132, 234, 224, 13, 78, 92, 233,
      188, 139, 15, 81, 159, 100, 222, 15, 85, 229, 38, 50, 16, 35, 133, 15,
      102, 218, 202, 143, 109, 220, 149, 251, 118, 13, 191, 118, 38, 183, 53,
      255, 126, 34, 96, 246, 120, 208, 9, 251, 28, 65, 179, 188, 182, 198, 178,
      180, 155, 16, 241, 201, 234, 252, 113, 127, 79, 158, 154, 72, 176, 198,
      212, 130, 238, 12, 123, 172, 133, 21, 49, 206, 61, 96, 92, 39, 78, 191,
      201, 38, 129, 99, 135, 144, 168, 46, 235, 63, 82, 73, 80, 156, 211, 67,
      67, 36, 14, 140, 125, 138, 75, 138, 93, 78, 72, 240, 105, 81, 223, 117,
      246, 146, 150, 61, 253, 225, 195, 108, 69, 226, 151, 72, 160, 230, 20,
      235, 253, 232, 230, 53, 149, 60, 210, 42, 11, 206, 25, 110, 7, 2, 48, 93,
      39, 99, 58, 124, 215, 57, 107, 12, 108, 100, 56, 177, 108, 32, 129, 41,
      190, 54, 90, 66, 233, 212, 251, 68, 208, 42, 103, 224, 153, 162, 45, 117,
      237, 142, 31, 44, 211, 19, 59, 195, 15, 131, 15, 34, 236, 170, 124, 102,
      135, 6, 161, 66, 166, 74, 176, 224, 133, 165, 7, 142, 91, 247, 68, 33,
      243, 45, 20, 116, 176, 37, 177, 253, 225, 23, 91, 173, 27, 90, 166, 17,
      96, 184, 160, 233, 140, 246, 33, 132, 21, 180, 217, 144, 132, 12, 230,
      118, 214, 188, 139, 202, 45, 19, 176, 74, 27, 170, 118, 239, 96, 152, 201,
      19, 5, 219, 56, 173, 88, 100, 61, 42, 60, 9, 67, 97, 30, 190, 236, 73,
      204, 40, 170, 181, 158, 79, 55, 188, 181, 151, 110, 239, 179, 164, 194,
      147, 175, 242, 61, 21, 254, 29, 227, 236, 66, 9, 162, 114, 28, 190, 8,
      159, 109, 85, 105, 165, 170, 144, 75, 151, 86, 113, 119, 84, 120, 1, 158,
      56, 179, 135, 245, 249, 251, 62, 50, 17, 171, 112, 35, 234, 174, 32, 18,
      81, 216, 0, 168, 23, 125, 213, 40, 232, 18, 17, 75, 62, 18, 184, 232, 76,
      222, 86, 127, 137, 147, 92, 247, 84, 22, 103, 40, 113, 209, 174, 48, 233,
      186, 26, 150, 215, 67, 110, 207, 7, 168, 94, 126, 89, 211, 147, 39, 176,
      171, 50, 84, 10, 229, 205, 95, 69, 247, 214, 20, 50, 59, 6, 53, 194, 41,
      104, 113, 92, 64, 172, 1, 91, 6, 214, 180, 57, 15, 164, 101, 173, 61, 180,
      48, 28, 24, 146, 159, 47, 177, 193, 26, 223, 207, 93, 82, 133, 26, 30,
      104, 51, 171, 182, 211, 19, 248, 151, 12, 214, 224, 151, 75, 212, 101,
      107, 128, 173, 14, 194, 237, 188, 147, 73, 219, 155, 8, 75, 166, 191, 99,
      183, 7, 184, 192, 24, 154, 73, 97, 159, 249, 67, 217, 125, 238, 4, 15,
      216, 34, 219, 71, 30, 202, 99, 186, 82, 242, 4, 108, 237, 227, 20, 47, 71,
      179, 90, 185, 179, 124, 227, 173, 129, 55, 49, 103, 4, 167, 79, 221, 83,
      237, 162, 83, 85, 45, 147, 101, 254, 252, 101, 16, 88, 195, 72, 246, 135,
      12, 148, 30, 58, 115, 48, 150, 172, 252, 29, 23, 65, 197, 229, 52, 75, 48,
      148, 149, 218, 68, 14, 96, 30, 24, 126, 255, 32, 70, 90, 223, 224, 207,
      129, 44, 197, 68, 158, 204, 26, 149, 77, 243, 21, 54, 7, 43, 89, 123, 49,
      174, 62, 108, 152, 35, 45, 112, 10, 137, 209, 94, 216, 171, 249, 21, 189,
      77, 52, 36, 178, 229, 9, 171, 131, 65, 71, 92, 120, 222, 119, 149, 231,
      55, 61, 227, 146, 235, 47, 69, 116, 189, 120, 95, 101, 3, 226, 233, 44,
      53, 141, 8, 203, 11, 53, 122, 18, 193, 234, 105, 0, 22, 223, 190, 125, 65,
      183, 129, 4, 175, 250, 126, 76, 157, 17, 195, 167, 182, 121, 215, 77, 62,
      69, 73, 186, 169, 17, 128, 140, 10, 145, 96, 26, 8, 9, 76, 206, 175, 240,
      93, 204, 138, 128, 6, 85, 111, 8, 69, 161, 8, 115, 205, 109, 43, 220, 164,
      41, 117, 240, 44, 123, 107, 97, 139, 94, 66, 76, 154, 0, 34, 21, 123, 237,
      98, 84, 114, 11, 52, 32, 212, 133, 74, 169, 64, 107, 225, 28, 38, 35, 187,
      207, 253, 88, 175, 81, 135, 99, 226, 105, 27, 49, 203, 129, 178, 169, 114,
      39, 245, 56, 246, 202, 220, 45, 159, 246, 45, 223, 91, 154, 83, 132, 96,
      158, 113, 193, 249, 223, 28, 143, 150, 147, 108, 110, 27, 189, 99, 109,
      113, 32, 171, 107, 49, 74, 158, 51, 120, 103, 96, 60, 154, 150, 65, 31,
      200, 137, 14, 181, 94, 149, 234, 205, 28, 14, 51, 164, 158, 107, 230, 219,
      88, 227, 226, 208, 147, 222, 252, 119, 134, 219, 250, 50, 212, 134, 27,
      43, 61, 241, 213, 116, 187, 208, 102, 73, 85, 88, 102, 230, 102, 107, 70,
      179, 95, 254, 2, 199, 204, 220, 170, 113, 150, 160, 0, 21, 205, 37, 185,
      232, 120, 119, 37, 58, 109, 204, 62, 64, 74, 167, 229, 39, 241, 29, 29,
      140, 165, 231, 214, 145, 47, 89, 146, 202, 104, 173, 106, 28, 18, 159, 7,
      145, 24, 3, 74, 56, 196, 216, 254, 105, 184, 40, 110, 125, 59, 229, 208,
      209, 198, 244, 168, 236, 35, 79, 149, 148, 62, 90, 2, 248, 48, 11, 68,
      195, 126, 82, 235, 179, 49, 75, 178, 200, 90, 113, 143, 150, 94, 51, 47,
      125, 108, 147, 55, 103, 223, 54, 111, 122, 184, 20, 202, 222, 26, 63, 247,
      46, 129, 101, 160, 217, 45, 118, 123, 195, 120, 234, 226, 156, 134, 86,
      79, 194, 209, 150, 57, 1, 110, 207, 237, 71, 82, 53, 96, 1, 94, 58, 251,
      94, 228, 20, 35, 187, 253, 70, 218, 66, 242, 235, 41, 183, 248, 247, 62,
      24, 110, 175, 244, 118, 188, 185, 146, 8, 240, 249, 104, 66, 207, 210, 88,
      188, 13, 120, 127, 146, 8, 250, 112, 216, 202, 238, 194, 163, 209, 179,
      100, 233, 238, 129, 14, 91, 113, 109, 165, 154, 34, 245, 60, 198, 218, 73,
      20, 39, 110, 108, 36, 210, 135, 244, 192, 100, 222, 64, 37, 45, 237, 64,
      238, 170, 223, 176, 246, 44, 198, 50, 174, 166, 204, 49, 10, 125, 167, 42,
      120, 226, 36, 148, 236, 161, 50, 79, 56, 232, 22, 201, 255, 40, 44, 234,
      60, 222, 232, 29, 225, 186, 254, 245, 165, 241, 83, 109, 111, 89, 104,
      139, 34, 218, 153, 19, 215, 238, 214, 108, 14, 164, 129, 206, 3, 197, 76,
      235, 150, 118, 130, 203, 42, 157, 184, 40, 111, 36, 9, 206, 11, 132, 132,
      80, 247, 65, 244, 46, 85, 151, 147, 186, 138, 132, 39, 137, 13, 163, 234,
      24, 177, 29, 165, 8, 153, 27, 104, 214, 43, 189, 10, 155, 241, 34, 233,
      46, 31, 181, 186, 238, 133, 30, 51, 247, 41, 6, 205, 213, 235, 149, 232,
      184, 16, 46, 81, 100, 65, 41, 27, 236, 246, 121, 176, 162, 87, 79, 183,
      14, 138, 181, 67, 59, 240, 102, 227, 171, 25, 20, 88, 249, 180, 90, 202,
      236, 223, 120, 211, 129, 61, 216, 54, 241, 107, 72, 241, 253, 166, 198,
      124, 48, 168, 250, 58, 79, 168, 147, 156, 86, 63, 37, 153, 19, 92, 155,
      146, 90, 131, 191, 68, 102, 190, 126, 115, 137, 210, 177, 125, 112, 27, 9,
      35, 151, 25, 138, 241, 130, 140, 32, 25, 238, 171, 115, 74, 5, 135, 243,
      237, 149, 117, 181, 182, 152, 8, 163, 49, 75, 35, 201, 43, 224, 54, 121,
      51, 147, 10, 221, 201, 74, 195, 78, 36, 92, 93, 119, 120, 203, 195, 62,
      222, 28, 227, 141, 164, 39, 46, 6, 53, 132, 195, 80, 246, 240, 247, 213,
      194, 129, 29, 154, 63, 241, 161, 251, 143, 102, 145, 61, 212, 73, 77, 36,
      42, 136, 93, 175, 139, 248, 233, 246, 17, 252, 76, 151, 208, 28, 26, 129,
      218, 19, 149, 176, 255, 1, 134, 63, 51, 190, 40, 19, 70, 138, 15, 181,
      225, 105, 182, 127, 27, 197, 238, 42, 181, 248, 217, 106, 123, 29, 96,
      164, 43, 147, 134, 20, 230, 134, 33, 113, 255, 51, 97, 138, 207, 248, 103,
      168, 241, 122, 189, 14, 2, 91, 174, 151, 16, 67, 182, 227, 55, 29, 23, 83,
      110, 58, 147, 251, 61, 191, 66, 143, 214, 166, 48, 222, 40, 177, 222, 52,
      25, 65, 3, 190, 208, 200, 51, 28, 239, 175, 162, 5, 119, 144, 229, 35,
      238, 120, 119, 78, 147, 60, 127, 151, 12, 105, 88, 224, 163, 135, 218,
      179, 200, 225, 233, 199, 113, 46, 10, 221, 197, 250, 73, 55, 208, 71, 160,
      79, 127, 203, 195, 46, 75, 108, 66, 209, 113, 129, 178, 4, 2, 237, 236,
      95, 168, 173, 190, 58, 85, 234, 146, 65, 202, 252, 129, 103, 137, 251,
      179, 141, 156, 10, 95, 249, 204, 57, 57, 70, 21, 172, 143, 193, 106, 178,
      159, 241, 63, 100, 236, 181, 144, 86, 109, 175, 76, 195, 167, 197, 107,
      39, 79, 241, 77, 249, 0, 137, 48, 122, 98, 49, 132, 31, 209, 64, 210, 13,
      55, 180, 86, 222, 193, 25, 126, 106, 163, 49, 255, 66, 108, 162, 24, 192,
      54, 45, 152, 174, 205, 18, 236, 243, 106, 247, 157, 102, 10, 201, 67, 28,
      62, 6, 224, 82, 126, 60, 114, 43, 19, 220, 196, 67, 18, 163, 95, 66, 246,
      68, 27, 172, 124, 106, 153, 35, 155, 176, 56, 119, 69, 69, 36, 200, 161,
      178, 14, 104, 21, 187, 64, 228, 90, 218, 213, 9, 37, 173, 239, 75, 43,
      244, 142, 133, 208, 173, 24, 178, 169, 122, 215, 25, 121, 104, 95, 210,
      213, 47, 49, 157, 118, 175, 229, 64, 175, 195, 82, 127, 128, 95, 212, 28,
      214, 218, 180, 47, 121, 194, 235, 169, 163, 201, 157, 236, 5, 51, 85, 59,
      5, 227, 55, 5, 188, 254, 228, 121, 200, 251, 148, 110, 250, 5, 48, 1, 117,
      160, 104, 129, 195, 7, 22, 33, 67, 245, 144, 249, 42, 251, 217, 126, 243,
      223, 71, 179, 99, 148, 86, 101, 30, 197, 134, 247, 131, 216, 191, 206,
      136, 131, 113, 105, 119, 78, 170, 250, 180, 142, 10, 227, 37, 198, 160,
      120, 142, 51, 72, 68, 149, 20, 140, 193, 159, 84, 77, 241, 22, 162, 42,
      224, 128, 45, 229, 106, 45, 114, 15, 232, 45,
    ]);
    const packedBytes = Uint8Array.from([
      45, 143, 252, 96, 151, 153, 204, 113, 247, 53, 24, 126, 159, 114, 159,
      202, 79, 215, 81, 77, 255, 127, 144, 93, 164, 224, 238, 94, 126, 76, 235,
      18, 172, 115, 45, 216, 234, 120, 79, 113, 129, 200, 166, 62, 243, 17, 9,
      250, 202, 180, 147, 228, 220, 11, 83, 123, 252, 121, 115, 116, 115, 130,
      124, 22, 101, 228, 93, 12, 154, 149, 135, 185, 33, 175, 106, 100, 123, 68,
      121, 111, 196, 201, 248, 150, 147, 195, 194, 24, 170, 84, 127, 167, 6, 62,
      132, 193, 43, 245, 159, 88, 254, 65, 131, 197, 158, 80, 185, 152, 105, 54,
      60, 66, 252, 7, 39, 28, 173, 44, 127, 82, 27, 193, 124, 209, 250, 143, 94,
      223, 115, 17, 218, 143, 161, 172, 198, 182, 250, 51, 11, 69, 130, 223, 22,
      200, 198, 84, 6, 147, 166, 26, 7, 95, 223, 9, 2, 217, 95, 76, 7, 145, 94,
      42, 124, 231, 17, 193, 29, 191, 149, 177, 57, 35, 252, 71, 100, 144, 175,
      173, 191, 65, 100, 202, 60, 93, 192, 113, 130, 190, 125, 86, 125, 204, 28,
      141, 105, 15, 7, 252, 17, 109, 137, 26, 244, 172, 137, 33, 252, 58, 148,
      130, 67, 65, 22, 121, 71, 56, 245, 212, 42, 219, 213, 97, 208, 113, 94,
      185, 47, 192, 15, 40, 159, 54, 38, 212, 176, 215, 21, 194, 47, 155, 232,
      10, 125, 124, 54, 131, 104, 128, 83, 157, 67, 22, 78, 29, 101, 71, 248,
      210, 129, 226, 117, 101, 117, 53, 125, 151, 60, 125, 6, 18, 118, 82, 219,
      165, 191, 71, 206, 157, 71, 128, 17, 55, 218, 123, 233, 171, 38, 102, 17,
      84, 183, 112, 197, 217, 110, 226, 169, 48, 145, 122, 78, 239, 124, 233,
      72, 208, 240, 19, 141, 235, 183, 17, 34, 39, 207, 140, 117, 215, 168, 193,
      182, 179, 15, 35, 208, 93, 104, 115, 56, 46, 62, 173, 59, 1, 118, 248,
      248, 46, 206, 129, 86, 10, 171, 24, 250, 21, 100, 241, 82, 231, 129, 55,
      198, 148, 89, 78, 70, 222, 129, 165, 132, 177, 211, 219, 165, 141, 30, 20,
      25, 12, 112, 26, 14, 200, 183, 138, 62, 5, 64, 197, 116, 76, 211, 142, 78,
      16, 106, 223, 22, 137, 123, 100, 213, 176, 200, 83, 83, 173, 65, 34, 135,
      168, 255, 21, 38, 176, 161, 216, 139, 147, 92, 47, 107, 182, 170, 242, 29,
      249, 36, 112, 248, 190, 163, 12, 244, 195, 179, 134, 88, 178, 76, 152, 59,
      38, 13, 241, 45, 144, 42, 224, 137, 136, 217, 94, 233, 24, 144, 58, 193,
      53, 15, 5, 185, 19, 69, 177, 166, 191, 53, 132, 214, 129, 233, 67, 221,
      239, 233, 220, 117, 78, 98, 113, 143, 232, 123, 42, 127, 120, 236, 199,
      92, 65, 140, 73, 73, 89, 10, 30, 127, 137, 217, 79, 126, 124, 153, 182,
      133, 211, 116, 101, 0, 132, 45, 179, 163, 74, 53, 102, 2, 214, 151, 6,
      218, 125, 234, 29, 44, 108, 157, 156, 103, 79, 82, 105, 41, 70, 35, 211,
      35, 94, 215, 67, 78, 213, 177, 4, 1, 67, 195, 66, 27, 92, 246, 103, 201,
      182, 68, 141, 124, 0, 162, 241, 147, 117, 216, 13, 183, 149, 17, 122, 39,
      132, 206, 40, 167, 191, 204, 66, 183, 77, 132, 88, 10, 60, 94, 49, 253,
      135, 187, 2, 161, 86, 154, 44, 15, 36, 243, 155, 115, 7, 216, 55, 102,
      222, 241, 224, 166, 122, 21, 94, 114, 237, 172, 40, 209, 55, 175, 85, 90,
      137, 173, 70, 161, 135, 100, 163, 124, 246, 0, 144, 119, 86, 195, 207, 5,
      211, 232, 52, 3, 20, 210, 166, 57, 175, 21, 212, 113, 249, 250, 133, 222,
      238, 63, 59, 177, 158, 157, 63, 146, 128, 21, 99, 182, 56, 190, 198, 227,
      21, 127, 243, 221, 85, 235, 100, 83, 217, 131, 233, 59, 204, 87, 20, 194,
      104, 110, 67, 68, 209, 238, 126, 171, 93, 184, 13, 250, 50, 224, 195, 30,
      99, 67, 196, 90, 56, 115, 78, 46, 15, 21, 215, 39, 129, 223, 89, 92, 97,
      139, 174, 78, 123, 131, 197, 23, 59, 222, 5, 40, 150, 124, 129, 100, 51,
      118, 138, 69, 212, 39, 240, 67, 140, 109, 77, 157, 46, 188, 199, 120, 147,
      17, 187, 151, 18, 139, 127, 157, 44, 68, 221, 190, 196, 122, 126, 152,
      208, 0, 203, 217, 65, 80, 213, 37, 151, 132, 234, 224, 13, 78, 92, 233,
      188, 139, 15, 81, 159, 100, 222, 15, 85, 229, 38, 50, 16, 35, 133, 15,
      102, 218, 202, 143, 109, 220, 149, 251, 118, 13, 191, 118, 38, 183, 53,
      255, 126, 34, 96, 246, 120, 208, 9, 251, 28, 65, 179, 188, 182, 198, 178,
      180, 155, 16, 241, 201, 234, 252, 113, 127, 79, 158, 154, 72, 176, 198,
      212, 130, 238, 12, 123, 172, 133, 21, 49, 206, 61, 96, 92, 39, 78, 191,
      201, 38, 129, 99, 135, 144, 168, 46, 235, 63, 82, 73, 80, 156, 211, 67,
      67, 36, 14, 140, 125, 138, 75, 138, 93, 78, 72, 240, 105, 81, 223, 117,
      246, 146, 150, 61, 253, 225, 195, 108, 69, 226, 151, 72, 160, 230, 20,
      235, 253, 232, 230, 53, 149, 60, 210, 42, 11, 206, 25, 110, 7, 2, 48, 93,
      39, 99, 58, 124, 215, 57, 107, 12, 108, 100, 56, 177, 108, 32, 129, 41,
      190, 54, 90, 66, 233, 212, 251, 68, 208, 42, 103, 224, 153, 162, 45, 117,
      237, 142, 31, 44, 211, 19, 59, 195, 15, 131, 15, 34, 236, 170, 124, 102,
      135, 6, 161, 66, 166, 74, 176, 224, 133, 165, 7, 142, 91, 247, 68, 33,
      243, 45, 20, 116, 176, 37, 177, 253, 225, 23, 91, 173, 27, 90, 166, 17,
      96, 184, 160, 233, 140, 246, 33, 132, 21, 180, 217, 144, 132, 12, 230,
      118, 214, 188, 139, 202, 45, 19, 176, 74, 27, 170, 118, 239, 96, 152, 201,
      19, 5, 219, 56, 173, 88, 100, 61, 42, 60, 9, 67, 97, 30, 190, 236, 73,
      204, 40, 170, 181, 158, 79, 55, 188, 181, 151, 110, 239, 179, 164, 194,
      147, 175, 242, 61, 21, 254, 29, 227, 236, 66, 9, 162, 114, 28, 190, 8,
      159, 109, 85, 105, 165, 170, 144, 75, 151, 86, 113, 119, 84, 120, 1, 158,
      56, 179, 135, 245, 249, 251, 62, 50, 17, 171, 112, 35, 234, 174, 32, 18,
      81, 216, 0, 168, 23, 125, 213, 40, 232, 18, 17, 75, 62, 18, 184, 232, 76,
      222, 86, 127, 137, 147, 92, 247, 84, 22, 103, 40, 113, 209, 174, 48, 233,
      186, 26, 150, 215, 67, 110, 207, 7, 168, 94, 126, 89, 211, 147, 39, 176,
      171, 50, 84, 10, 229, 205, 95, 69, 247, 214, 20, 50, 59, 6, 53, 194, 41,
      104, 113, 92, 64, 172, 1, 91, 6, 214, 180, 57, 15, 164, 101, 173, 61, 180,
      48, 28, 24, 146, 159, 47, 177, 193, 26, 223, 207, 93, 82, 133, 26, 30,
      104, 51, 171, 182, 211, 19, 248, 151, 12, 214, 224, 151, 75, 212, 101,
      107, 128, 173, 14, 194, 237, 188, 147, 73, 219, 155, 8, 75, 166, 191, 99,
      183, 7, 184, 192, 24, 154, 73, 97, 159, 249, 67, 217, 125, 238, 4, 15,
      216, 34, 219, 71, 30, 202, 99, 186, 82, 242, 4, 108, 237, 227, 20, 47, 71,
      179, 90, 185, 179, 124, 227, 173, 129, 55, 49, 103, 4, 167, 79, 221, 83,
      237, 162, 83, 85, 45, 147, 101, 254, 252, 101, 16, 88, 195, 72, 246, 135,
      12, 148, 30, 58, 115, 48, 150, 172, 252, 29, 23, 65, 197, 229, 52, 75, 48,
      148, 149, 218, 68, 14, 96, 30, 24, 126, 255, 32, 70, 90, 223, 224, 207,
      129, 44, 197, 68, 158, 204, 26, 149, 77, 243, 21, 54, 7, 43, 89, 123, 49,
      174, 62, 108, 152, 35, 45, 112, 10, 137, 209, 94, 216, 171, 249, 21, 189,
      77, 52, 36, 178, 229, 9, 171, 131, 65, 71, 92, 120, 222, 119, 149, 231,
      55, 61, 227, 146, 235, 47, 69, 116, 189, 120, 95, 101, 3, 226, 233, 44,
      53, 141, 8, 203, 11, 53, 122, 18, 193, 234, 105, 0, 22, 223, 190, 125, 65,
      183, 129, 4, 175, 250, 126, 76, 157, 17, 195, 167, 182, 121, 215, 77, 62,
      69, 73, 186, 169, 17, 128, 140, 10, 145, 96, 26, 8, 9, 76, 206, 175, 240,
      93, 204, 138, 128, 6, 85, 111, 8, 69, 161, 8, 115, 205, 109, 43, 220, 164,
      41, 117, 240, 44, 123, 107, 97, 139, 94, 66, 76, 154, 0, 34, 21, 123, 237,
      98, 84, 114, 11, 52, 32, 212, 133, 74, 169, 64, 107, 225, 28, 38, 35, 187,
      207, 253, 88, 175, 81, 135, 99, 226, 105, 27, 49, 203, 129, 178, 169, 114,
      39, 245, 56, 246, 202, 220, 45, 159, 246, 45, 223, 91, 154, 83, 132, 96,
      158, 113, 193, 249, 223, 28, 143, 150, 147, 108, 110, 27, 189, 99, 109,
      113, 32, 171, 107, 49, 74, 158, 51, 120, 103, 96, 60, 154, 150, 65, 31,
      200, 137, 14, 181, 94, 149, 234, 205, 28, 14, 51, 164, 158, 107, 230, 219,
      88, 227, 226, 208, 147, 222, 252, 119, 134, 219, 250, 50, 212, 134, 27,
      43, 61, 241, 213, 116, 187, 208, 102, 73, 85, 88, 102, 230, 102, 107, 70,
      179, 95, 254, 2, 199, 204, 220, 170, 113, 150, 160, 0, 21, 205, 37, 185,
      232, 120, 119, 37, 58, 109, 204, 62, 64, 74, 167, 229, 39, 241, 29, 29,
      140, 165, 231, 214, 145, 47, 89, 146, 202, 104, 173, 106, 28, 18, 159, 7,
      145, 24, 3, 74, 56, 196, 216, 254, 105, 184, 40, 110, 125, 59, 229, 208,
      209, 198, 244, 168, 236, 35, 79, 149, 148, 62, 90, 2, 248, 48, 11, 68,
      195, 126, 82, 235, 179, 49, 75, 178, 200, 90, 113, 143, 150, 94, 51, 47,
      125, 108, 147, 55, 103, 223, 54, 111, 122, 184, 20, 202, 222, 26, 63, 247,
      46, 129, 101, 160, 217, 45, 118, 123, 195, 120, 234, 226, 156, 134, 86,
      79, 194, 209, 150, 57, 1, 110, 207, 237, 71, 82, 53, 96, 1, 94, 58, 251,
      94, 228, 20, 35, 187, 253, 70, 218, 66, 242, 235, 41, 183, 248, 247, 62,
      24, 110, 175, 244, 118, 188, 185, 146, 8, 240, 249, 104, 66, 207, 210, 88,
      188, 13, 120, 127, 146, 8, 250, 112, 216, 202, 238, 194, 163, 209, 179,
      100, 233, 238, 129, 14, 91, 113, 109, 165, 154, 34, 245, 60, 198, 218, 73,
      20, 39, 110, 108, 36, 210, 135, 244, 192, 100, 222, 64, 37, 45, 237, 64,
      238, 170, 223, 176, 246, 44, 198, 50, 174, 166, 204, 49, 10, 125, 167, 42,
      120, 226, 36, 148, 236, 161, 50, 79, 56, 232, 22, 201, 255, 40, 44, 234,
      60, 222, 232, 29, 225, 186, 254, 245, 165, 241, 83, 109, 111, 89, 104,
      139, 34, 218, 153, 19, 215, 238, 214, 108, 14, 164, 129, 206, 3, 197, 76,
      235, 150, 118, 130, 203, 42, 157, 184, 40, 111, 36, 9, 206, 11, 132, 132,
      80, 247, 65, 244, 46, 85, 151, 147, 186, 138, 132, 39, 137, 13, 163, 234,
      24, 177, 29, 165, 8, 153, 27, 104, 214, 43, 189, 10, 155, 241, 34, 233,
      46, 31, 181, 186, 238, 133, 30, 51, 247, 41, 6, 205, 213, 235, 149, 232,
      184, 16, 46, 81, 100, 65, 41, 27, 236, 246, 121, 176, 162, 87, 79, 183,
      14, 138, 181, 67, 59, 240, 102, 227, 171, 25, 20, 88, 249, 180, 90, 202,
      236, 223, 120, 211, 129, 61, 216, 54, 241, 107, 72, 241, 253, 166, 198,
      124, 48, 168, 250, 58, 79, 168, 147, 156, 86, 63, 37, 153, 19, 92, 155,
      146, 90, 131, 191, 68, 102, 190, 126, 115, 137, 210, 177, 125, 112, 27, 9,
      35, 151, 25, 138, 241, 130, 140, 32, 25, 238, 171, 115, 74, 5, 135, 243,
      237, 149, 117, 181, 182, 152, 8, 163, 49, 75, 35, 201, 43, 224, 54, 121,
      51, 147, 10, 221, 201, 74, 195, 78, 36, 92, 93, 119, 120, 203, 195, 62,
      222, 28, 227, 141, 164, 39, 46, 6, 53, 132, 195, 80, 246, 240, 247, 213,
      194, 129, 29, 154, 63, 241, 161, 251, 143, 102, 145, 61, 212, 73, 77, 36,
      42, 136, 93, 175, 139, 248, 233, 246, 17, 252, 76, 151, 208, 28, 26, 129,
      218, 19, 149, 176, 255, 1, 134, 63, 51, 190, 40, 19, 70, 138, 15, 181,
      225, 105, 182, 127, 27, 197, 238, 42, 181, 248, 217, 106, 123, 29, 96,
      164, 43, 147, 134, 20, 230, 134, 33, 113, 255, 51, 97, 138, 207, 248, 103,
      168, 241, 122, 189, 14, 2, 91, 174, 151, 16, 67, 182, 227, 55, 29, 23, 83,
      110, 58, 147, 251, 61, 191, 66, 143, 214, 166, 48, 222, 40, 177, 222, 52,
      25, 65, 3, 190, 208, 200, 51, 28, 239, 175, 162, 5, 119, 144, 229, 35,
      238, 120, 119, 78, 147, 60, 127, 151, 12, 105, 88, 224, 163, 135, 218,
      179, 200, 225, 233, 199, 113, 46, 10, 221, 197, 250, 73, 55, 208, 71, 160,
      79, 127, 203, 195, 46, 75, 108, 66, 209, 113, 129, 178, 4, 2, 237, 236,
      95, 168, 173, 190, 58, 85, 234, 146, 65, 202, 252, 129, 103, 137, 251,
      179, 141, 156, 10, 95, 249, 204, 57, 57, 70, 21, 172, 143, 193, 106, 178,
      159, 241, 63, 100, 236, 181, 144, 86, 109, 175, 76, 195, 167, 197, 107,
      39, 79, 241, 77, 249, 0, 137, 48, 122, 98, 49, 132, 31, 209, 64, 210, 13,
      55, 180, 86, 222, 193, 25, 126, 106, 163, 49, 255, 66, 108, 162, 24, 192,
      54, 45, 152, 174, 205, 18, 236, 243, 106, 247, 157, 102, 10, 201, 67, 28,
      62, 6, 224, 82, 126, 60, 114, 43, 19, 220, 196, 67, 18, 163, 95, 66, 246,
      68, 27, 172, 124, 106, 153, 35, 155, 176, 56, 119, 69, 69, 36, 200, 161,
      178, 14, 104, 21, 187, 64, 228, 90, 218, 213, 9, 37, 173, 239, 75, 43,
      244, 142, 133, 208, 173, 24, 178, 169, 122, 215, 25, 121, 104, 95, 210,
      213, 47, 49, 157, 118, 175, 229, 64, 175, 195, 82, 127, 128, 95, 212, 28,
      214, 218, 180, 47, 121, 194, 235, 169, 163, 201, 157, 236, 5, 51, 85, 59,
      5, 227, 55, 5, 188, 254, 228, 121, 200, 251, 148, 110, 250, 5, 48, 1, 117,
      160, 104, 129, 195, 7, 22, 33, 67, 245, 144, 249, 42, 251, 217, 126, 243,
      223, 71, 179, 99, 148, 86, 101, 30, 197, 134, 247, 131, 216, 191, 206,
      136, 131, 113, 105, 119, 78, 170, 250, 180, 142, 10, 227, 37, 198, 160,
      120, 142, 51, 72, 68, 149, 20, 140, 193, 159, 84, 77, 241, 22, 162, 42,
      224, 128, 45, 229, 106, 45, 114, 15, 232, 45, 60, 0, 0, 0, 0, 0, 0, 0, 8,
      0, 0, 0, 0, 0, 0, 0, 26, 170, 128, 212, 106, 228, 167, 67,
    ]);

    const result = unpackBytes(packedBytes);

    expect(result.dataBytes).toEqual(unpacked);
    expect(result.size).toEqual([60]);
    expect(result.seed).toEqual(4875116269134719514n);
  });

  // Mirrors test_spliter [cite: 57, 58, 59, 60]
  it("r3SplitWChunks should produce valid chunks", () => {
    for (let i = 0; i < 10; i++) {
      // [cite: 57]
      const randLen = (rng.nextU32() % 995) + 5; // [cite: 57]
      const bytes = new Uint8Array(randLen);
      rng.fillBytes(bytes); // [cite: 58]
      const r3 = r3DecodeChunks(bytes); // [cite: 58]
      // Trim trailing zeros
      let lastNonZeroIndex = r3.length - 1;
      while (lastNonZeroIndex >= 0 && r3[lastNonZeroIndex] === 0) {
        lastNonZeroIndex--;
      }
      const r3ToSplit = r3.slice(0, lastNonZeroIndex + 1);

      if (r3ToSplit.length === 0) continue;

      const { chunks, size } = r3SplitWChunks(
        r3ToSplit,
        getRandomValue,
        currentParams,
      ); // [cite: 58]

      expect(chunks.length).toBeGreaterThan(0); // Ensure chunks are produced

      for (let k = 0; k < chunks.length; k++) {
        // [cite: 59]
        const chunk = chunks[k];
        const indexSize = size[k]; // Renamed from 'index' in Rust test to avoid confusion

        // Calculate sum of absolute values for the chunk
        const sum = chunk.reduce((acc, val) => acc + Math.abs(val), 0);

        expect(sum).toEqual(currentParams.W); // Weight must equal W [cite: 60]
        expect(chunk.length).toEqual(currentParams.P); // Chunk length must equal P [cite: 60]
        expect(indexSize).toBeLessThanOrEqual(currentParams.P); // Size must be <= P [cite: 60]
        expect(indexSize).toBeGreaterThanOrEqual(0); // Add non-negativity check for size
      }
    }
  });
});
